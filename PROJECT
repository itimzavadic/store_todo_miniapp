# Проект: Магазинное Туду на базе Telegram Mini App

### 1. Описание проекта
Приложение предназначено для малых и средних магазинов для управления задачами, командой и складом через Telegram Mini App. Основная цель — обеспечить простой, быстрый и безопасный контроль задач, заказов и остатков, с возможностью автоматизации повторяющихся операций.

### 2. Основные функции (MVP)
#### 2.1. Задачи
- Создание задачи: название, описание, срок, категория, приоритет (цветовое выделение), исполнитель.
- Отметка выполнения задачи с возможностью прикрепления фото и комментариев.
- Хранение выполненных задач в отдельном разделе с возможностью восстановления.
- Счётчики задач по категориям и исполнителям.
- Журнал действий: создание, изменение, выполнение задач с фильтрами.
- Уведомления о приближающихся дедлайнах.
- Категории и фильтры задач; возможность создавать свои категории.

#### 2.2. Шаблоны и комплекты
- Возможность создавать шаблоны однотипных задач.
- Периодические задачи с автогенерацией.
- Комплекты товаров с автоматическим списанием со склада (только при выполнении задачи).
- Проверка остатков перед списанием.

#### 2.3. Учёт товаров / склад
- Добавление товара: название, количество, категория, фото, опционально штрих-код.
- Инвентаризация: сверка фактического наличия с учётом добавленного товара.
- Расход / списание: уменьшение количества при выдаче, фиксация в журнале действий.
- Быстрый поиск и фильтры по названию, категории, остаткам и шаблонам комплектов.
- Уведомления о низком остатке.

#### 2.4. Фото и доказательства выполнения
- Возможность прикреплять фото к задаче при выполнении.
- Просмотр фото только пользователями с правом доступа.

#### 2.5. Роли и права доступа
- Владелец / Администратор: полный доступ ко всем функциям.
- Менеджер: создание и управление задачами, назначение исполнителей, просмотр журнала действий по своим категориям.
- Сотрудник: видит только свои задачи, может отмечать выполнение и прикреплять фото/комментарий.
- Гибкая настройка видимости категорий по ролям.
- Возможность установки пароля на проект, который защищает доступ к приложению полностью или к отдельным функциям для повышения безопасности.

#### 2.6. Отчётность (упрощённая)
- Счётчики задач по категории и исполнителю.
- Фильтры по дате (день, неделя, месяц).
- Экспорт CSV/PDF (опционально).
- Расширенная аналитика (для будущих версий): продажи, прибыль, остатки, отчёт по поставщикам.

### 3. Детали реализации MVP
- Простота интерфейса: основные действия — создать задачу, выполнить задачу, списать товар, проверить остатки.
- Минимальная настройка ролей для безопасности и контроля.
- Использование Telegram Mini App как основной платформы взаимодействия.
- Привязка фото и документов напрямую к задачам.
- Шаблоны задач и комплектов для сокращения ручного ввода.
- Автоматическое списание товаров только при успешном выполнении задачи.
- Возможность установки пароля на проект для дополнительной защиты данных.

### 4. Безопасность и данные
- Доступ к задачам и складу регулируется ролями.
- Фото и документы доступны только пользователям с правами на задачу.
- Возможность установки пароля на проект для ограничения общего доступа.
- Для будущих версий: резервное копирование и защита облачного хранилища.

### 5. Планируемые расширения (после MVP)
- Полная аналитика и отчётность: продажи, прибыль, остатки, отчёты по поставщикам.
- Расширенные роли и права доступа.
- Автоматическая интеграция с внешними поставщиками и CRM.
- Продвинутые фильтры и визуализация данных.
- Расширенные возможности фото/документов: версии, редактирование, вложения.

### 6. Цели MVP
- Быстрое внедрение и использование в магазине.
- Простое и наглядное управление задачами и складом.
- Минимальные трудозатраты на обучение сотрудников.
- Возможность дальнейшей масштабируемой доработки проекта.

### 7. Архитектурные принципы (Clean Architecture)
- Разделение слоёв: `domain` (бизнес‑логика), `application` (use cases), `infrastructure` (БД, внешние сервисы), `presentation` (UI/Telegram Mini App).
- Зависимости направлены внутрь: внешние слои зависят от внутренних, но не наоборот.
- Интерфейсы/абстракции на границах: репозитории, сервисы уведомлений, провайдеры хранилища объявляются в `application`/`domain`, реализации — в `infrastructure`.
- Тестируемость: бизнес‑логика покрывается юнит‑тестами без инфраструктуры, для адаптеров — интеграционные тесты.
- Явные контракты и DTO: вход/выход use case строго типизирован, валидация и маппинг изолированы.

### 8. Принципы чистого кода
- Понятные названия: говорящие имена функций и переменных, без аббревиатур.
- Малые функции: одна ответственность, предсказуемые побочные эффекты.
- Ранние возвраты, минимум вложенности, явная обработка ошибок.
- Комментарии в коде: краткие и по делу, только там, где решение неочевидно (инварианты, компромиссы, ограничения). Просьба писать комментарии — учитывается на всём проекте.
- Строгие границы: не пересекать слои; не тянуть инфраструктурные детали в домен.
- Тесты как спецификация поведения.

### 9. Платформа
Приложение создаётся как Telegram Mini App (Telegram Web Apps API) с поддержкой UI‑компонентов Telegram и интеграцией через bot API/веб‑хуки.
